STRUCT: struct
ID: test
LC:{
TYPE:int
ID: a
SEMI:;
TYPE:char
ID: t
SEMI:;
RC:}
SEMI:;
TYPE:int
ID: ok
LP:(
RP:)
LC:{
TYPE:char
ID: str1
LB:[
INT:15
RB:]
SEMI:;
TYPE:char
ID: str2
LB:[
INT:15
RB:]
SEMI:;
TYPE:int
ID: ret
SEMI:;
ID: ret
ASSIGNOP:=
INT:0
SEMI:;
RETURN:return
NOT:!
ID: ret
SEMI:;
RC:}
VOID:void
ID: main
LP:(
RP:)
LC:{
TYPE:int
ID: a
ASSIGNOP:=
INT:0
SEMI:;
TYPE:float
ID: b
ASSIGNOP:=
FLOAT:1.0
SEMI:;
TYPE:char
ID: c
ASSIGNOP:=
CHAR:"a"
SEMI:;
IF:if
LP:(
ID: a
RELOP:==
INT:0
RP:)
ID: c
ASSIGNOP:=
CHAR:"b"
SEMI:;
ELSE:else
RETURN:return
INT:0
SEMI:;
READ:read
LP:(
ID: a
RP:)
SEMI:;
WRITE:write
LP:(
ID: b
RP:)
SEMI:;
WHILE:while
LP:(
ID: a
RELOP:==
INT:1
RP:)
LC:{
ID: a
ADDSELF:++
SEMI:;
ID: a
SUBSELF:--
SEMI:;
ID: b
ASSIGNOP:=
INT:1
SEMI:;
ID: a
OR:||
ID: b
SEMI:;
ID: a
AND:&&
ID: b
SEMI:;
ID: a
DIV:/
ID: b
SEMI:;
ID: a
MUL:*
ID: b
SEMI:;
ID: test
DOT:.
ID: a
ASSIGNOP:=
ID: a
SEMI:;
IF:if
LP:(
ID: a
RELOP:==
ID: b
RP:)
LC:{
BREAK:break
SEMI:;
RC:}
ELSE:else
LC:{
CONTINUE:continue
SEMI:;
RC:}
RC:}
RC:}
